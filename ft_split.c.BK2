/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mvisca-g <mvisca-g@student.42barcel>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/04/25 11:26:55 by mvisca-g          #+#    #+#             */
/*   Updated: 2023/05/08 18:36:00 by mvisca-g         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static char	**validate_and_copy(char **res, int k, char *aux)
{
	int	i;

	i = 0;
	if (!res[k])
	{
		while (i < k) 
			free(res[i++]);
		free(res);
		return (NULL);
	}
	while (aux[i])
	{
		res[k][i] = aux[i];
		i++;
	}
	res[k][i] = '\0';
	return (res);
}

static char	**split_str(char **res, char *s, char c)
{
	int		i;
	int		j;
	int		k;
	char	aux[100];

	k = 0;
	i = -1;
	while (s[++i])
	{
		if (s[i] == c)
			continue;
		j = 0;
		while (s[i] && s[i] != c)
			aux[j++] = s[i++];
		aux[j] = '\0';
		res[k] = (char *) malloc (sizeof(char) * j + 1);
		if (!validate_and_copy(res, k++, aux))
			return (NULL);
	}
}

static int	count_words(char *s, char c)
{
	int		count;
	int		i;

	count = 0;
	i = 0;
	while (s[i])
	{
		if (s[i++] == c)
			continue;
		count++;
		while (s[i] && s[i] != c)
			i++;
	}
	return (count);
}

char	**ft_split(const char *s, char c)
{
	char	**res;
	int		count;

	if (s == NULL)
		return (NULL);
	count = count_words((char *)s, c);
	res = (char **) malloc(sizeof(char *) * count + 1);
	if (!res)
		return (NULL);
	split_str(res, (char *)s, c);
	return (res);
}

/*
int	main(int ac, char **av)
{
	char	s1[] = "  Hello split this    ";
	char	**res;
	int		i;
	char	c = ' ';

	res = ft_split(av[1], av[2][0]);
	i = 0;
	while (res[i])
	{
		printf ("%d=%s. \n", i, res[i]);
		i++;
	}
	printf ("LEN=%d\n", i);
	return (0);
}
*/
